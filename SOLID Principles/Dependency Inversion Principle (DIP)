The Dependency Inversion Principle (DIP) is one of the five SOLID principles of object-oriented design and programming.

It provides guidance for decoupling software modules, making systems easier to manage, scale, and test.

Specifically, DIP focuses on the decoupling of high-level modules from low-level modules by introducing an abstraction layer between them.

This way, high-level modules are not dependent on low-level modules, but both are dependent on abstractions. Abstractions should not depend on details.

Details should depend on abstractions.

Without Dependency Inversion Principle

public class EmailSender
{
    public void SendMessage(string message)
    {
        Console.WriteLine($"Sending email with message: {message}");
    }
}

public class SMSSender
{
    public void SendMessage(string message)
    {
        Console.WriteLine($"Sending SMS with message: {message}");
    }
}

public class NotificationService
{
    private EmailSender _emailSender;
    private SMSSender _smsSender;

    public NotificationService()
    {
        _emailSender = new EmailSender();
        _smsSender = new SMSSender();
    }

    public void NotifyByEmail(string message)
    {
        _emailSender.SendMessage(message);
    }

    public void NotifyBySMS(string message)
    {
        _smsSender.SendMessage(message);
    }
}

class Program
{
    static void Main(string[] args)
    {
        NotificationService notificationService = new NotificationService();
        notificationService.NotifyByEmail("Hello, World via Email!");
        notificationService.NotifyBySMS("Hello, World via SMS!");
    }
}


In this version, the NotificationService class directly creates and uses instances of EmailSender and SMSSender.

There are several drawbacks to this approach:
1.	Tight Coupling: NotificationService is tightly coupled to the specific implementations of EmailSender and SMSSender.
    If you want to add a new notification method (e.g., a push notification), you have to modify the NotificationService class.

2.	Difficult to Test: Testing the NotificationService class in isolation becomes more difficult because it's directly instantiating the sender classes.
    You cannot easily mock these dependencies in unit tests without modifying the design.

3.	Lack of Flexibility: Switching out the messaging service (e.g., using a different email service provider) requires changes to the
    NotificationService class, violating the open/closed principle, which states that software entities (classes, modules, functions, etc.) should be 
    open for extension, but closed for modification.

With Dependency Inversion Principle

Step 1: Define an Abstraction

First, we define an interface that represents an abstraction of the service that will be used by our high-level module.

This interface represents what the service does without specifying how it does it.

public interface IMessageSender
{
    void SendMessage(string message);
}

Step 2: Implement the Abstraction

Next, we provide one or more implementations of the IMessageSender interface. Each implementation represents a low-level module.

public class EmailSender : IMessageSender
{
    public void SendMessage(string message)
    {
        Console.WriteLine($"Sending email with message: {message}");
    }
}

public class SMSSender : IMessageSender
{
    public void SendMessage(string message)
    {
        Console.WriteLine($"Sending SMS with message: {message}");
    }
}


Step 3: High-Level Module

Our high-level module depends on the IMessageSender abstraction, not the concrete implementations.

This allows us to easily switch out the message sending mechanism without changing the high-level module's code.


public class NotificationService
{
    private readonly IMessageSender _messageSender;

    public NotificationService(IMessageSender messageSender)
    {
        _messageSender = messageSender;
    }

    public void Notify(string message)
    {
        _messageSender.SendMessage(message);
    }
}


Step 4: Composition Root

Finally, the composition root of the application is where we decide which implementation of IMessageSender to use.

This decision can be hard-coded, based on configuration, or even determined at runtime.


class Program
{
    static void Main(string[] args)
    {
        // Decide which message sender to use
        IMessageSender messageSender = new EmailSender();
        // IMessageSender messageSender = new SMSSender(); // Or use SMS sender

        NotificationService notificationService = new NotificationService(messageSender);
        notificationService.Notify("Hello, World!");
    }
}


In this example, the NotificationService class is a high-level module that depends on the IMessageSender interface, an abstraction, rather than
the concrete EmailSender or SMSSender classes.

This adheres to the Dependency Inversion Principle by decoupling the notification logic from the specifics of how messages are sent, making the
system more flexible and easier to maintain.


