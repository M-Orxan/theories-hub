1. What is Boxing and Unboxing?

Boxing: - When variables/objects move from Stack to Heap.
With another word boxing is the process of converting a value type (such as int, double, bool, etc.) into a reference type (specifically, into an object).
When you box a value type, the system creates a new object on the heap, and the value of the value type is copied into this new object.


UnBoxing: - When variables/objects move from Heap to Stack
With another word unboxing is the reverse process of boxing; it converts a reference type back into a value type.
This operation requires an explicit cast to be performed, as the program needs to know what type of value is being unboxed.
It's important to note that unboxing not only casts the object back into the value type but also copies the value from the heap back into the stack.

==========================================================================================================================================================

2. How do Boxing and Unboxing affect to performance?
Boxing and unboxing operations can impact performance, especially in scenarios where they are performed frequently.
This is because they involve memory allocations and copying of data.
It's generally recommended to avoid unnecessary boxing and unboxing operations whenever possible, as they can introduce overhead and degrade performance.

=========================================================================================================================================================

3. Can we avod Boxing and Unboxing?

Boxing and Unboxing cannot be avoided completely.
Situations like taking data from UI or binding to Grid will have to go through boxing and unboxing.
But unnecessarily doing boxing and unboxing is a very bad practice.

=========================================================================================================================================================
