Class and Struct both are the user defined data type but have some major differences:

Value Type vs Reference Type:
Structs: Structs are value types. When you create a struct and assign it to another variable, a copy of the struct is created, and modifications to one do not affect the other.
Classes: Classes are reference types. When you create an instance of a class and assign it to another variable, both variables refer to the same object in memory. Changes to one variable affect the other.

Memory Allocation:
Structs: Memory for a struct is allocated on the stack, and each instance of a struct has its own copy of data.
Classes: Memory for a class is allocated on the heap, and multiple references can point to the same object.

Struct is usually used for smaller amounts of data.
Classes are usually used for large amounts of data.

Inheritance:
Structs: Cannot inherit from another struct or class, and they cannot be the base of a class.
Classes: Can participate in inheritance hierarchies and be used as a base class or derived class.

A struct can't be abstract.
A class can be abstract type.

No need to create object by new keyword.
We canâ€™t create an object of a class without using new keyword.

Default Constructor:
Structs: A default (parameterless) constructor is automatically generated by the compiler for a struct. You can also define your own parameterized constructor,
but you can't have a parameterless constructor explicitly.
Classes: Classes allow you to define both default and parameterized constructors. If you don't provide a constructor, a default one is created automatically.
